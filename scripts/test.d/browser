#! /usr/bin/env bash
#
# Runs browser tests using Phantom JS or in other browsers using Karma
#
# Usage:
#   {{go}} {{cmd}} [--coverage|--karma]
#
# Options:
#   --coverage  Collect test coverage data using istanbul
#   --karma     Run tests using Karma on all available browsers
#
# Globals:
#   KARMA_SINGLE_RUN:  Run in Karma `singleRun` mode if 'true'

declare TEST_BROWSER_HELPER_DIR='public/tests/generated'
declare TEST_BROWSER_HELPER_INPUT='tests/helpers/browser.js'
declare TEST_BROWSER_COVERAGE_FILE="$_GO_ROOTDIR/.coverage/browser.json"
declare TEST_BROWSER_COVERAGE_MIDDLEWARE="$_GO_ROOTDIR/tests/helpers/coverage-middleware.js"

_test_browser_tab_completion() {
  local word_index="$1"
  shift
  local args=("$@")
  local word="${args[$word_index]}"

  if [[ "$word_index" -ne '0' ]]; then
    return 1
  fi
  @go.compgen -W '--coverage --karma' -- "$word"
}

_test_browser_create_bundle() {
  local helper_dir="$TEST_BROWSER_HELPER_DIR"
  local bundle="$helper_dir/index.js"

  if [[ ! -d "$helper_dir" ]] && ! mkdir -p "$helper_dir"; then
    @go.printf 'Failed to create directory: %s\n' "$helper_dir" >&2
    return 1
  fi

  browserify "$TEST_BROWSER_HELPER_INPUT" >"$bundle"

  if [[ "$?" -ne '0' ]]; then
    @go.printf 'Browserify failed to create: %s\n' "$bundle" >&2
    exit 1
  fi
}

_test_browser_run_tests() {
  local port
  local test_server_url
  local server_pid
  local result

  port="$(tests/helpers/pick-unused-port)"
  if [[ "$?" -ne '0' ]]; then
    @go.printf 'Failed to pick an unused port.\n' >&2
    return 1
  fi
  test_server_url="http://localhost:${port}"

  set -m
  live-server --no-browser --port=${port} \
    --middleware="$TEST_BROWSER_COVERAGE_MIDDLEWARE" public/ &

  if [[ "$?" -ne '0' ]]; then
    @go.printf 'Failed to launch live-server on port %d.\n' "$port" >&2
    return 1
  elif [[ -n "$CI" ]]; then
    # live-server needs a little extra time on Travis.
    sleep 1
  fi
  server_pid="$!"

  phantomjs node_modules/mocha-phantomjs-core/mocha-phantomjs-core.js \
    "$test_server_url/tests/" 'spec' "{ \"useColors\": true }"
  result="$?"
  _test_browser_download_coverage

  kill -INT "$server_pid"
  set +m
  return "$result"
}

_test_browser_download_coverage() {
  if [[ -z "$__coverage_run" ]]; then
    return
  elif ! mkdir -p "${TEST_BROWSER_COVERAGE_FILE%/*}"; then
    @go.log WARN 'Failed to create coverage data directory.'
  elif ! command -v curl >/dev/null; then
    @go.log WARN 'curl must be installed to download coverage data.'
  elif ! curl "$test_server_url/coverage.json" \
    -s -o "$TEST_BROWSER_COVERAGE_FILE"; then
    @go.log WARN 'Failed to download coverage data.'
  fi
}

_test_browser() {
  local __coverage_run
  local result=0

  case "$1" in
  --complete)
    # Tab completions
    shift
    _test_browser_tab_completion "$@"
    return
    ;;
  --coverage)
    __coverage_run='true'
    . "$_GO_USE_MODULES" 'coverage'
    if [[ -z "$__TEST_ALL" ]]; then
      rm -f "$URLP_COVERAGE_DATADIR"/*.json
    fi
    ;;
  --karma)
    karma start
    return "$?"
    ;;
  '')
    ;;
  *)
    @go.printf 'Unknown argument: %s\n' "$1" >&2
    return 1
    ;;
  esac

  _test_browser_create_bundle && _test_browser_run_tests
  result="$?"

  if [[ -n "$__coverage_run" && -z "$__TEST_ALL" ]] &&
    ! urlp.generate_coverage_report; then
    result='1'
  fi
  return "$result"
}

_test_browser "$@"
