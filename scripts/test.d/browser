#! /usr/bin/env bash
#
# Runs browser tests using Phantom JS
#
# Usage:
#   {{go}} {{cmd}} [--coverage]
#
# Options:
#   --coverage  Collect test coverage data using istanbul

declare TEST_BROWSER_HELPER_DIR='public/tests/generated'
declare TEST_BROWSER_HELPER_INPUT='tests/helpers/browser.js'

_test_browser_tab_completion() {
  local word_index="$1"
  shift
  local args=("$@")
  local word="${args[$word_index]}"

  if [[ "$word_index" -ne '0' ]]; then
    return 1
  fi
  @go.compgen -W '--coverage' -- "$word"
}

_test_browser_create_bundle() {
  local helper_dir="$TEST_BROWSER_HELPER_DIR"
  local bundle="$helper_dir/index.js"

  if [[ ! -d "$helper_dir" ]] && ! mkdir -p "$helper_dir"; then
    @go.printf 'Failed to create directory: %s\n' "$helper_dir" >&2
    return 1
  fi

  browserify "$TEST_BROWSER_HELPER_INPUT" >"$bundle"

  if [[ "$?" -ne '0' ]]; then
    @go.printf 'Browserify failed to create: %s\n' "$bundle" >&2
    exit 1
  fi
}

_test_browser_run_tests() {
  local port
  local test_server_url
  local server_pid
  local result

  port="$(tests/helpers/pick-unused-port)"
  if [[ "$?" -ne '0' ]]; then
    @go.printf 'Failed to pick an unused port.\n' >&2
    return 1
  fi
  test_server_url="http://localhost:${port}/tests/"

  set -m
  live-server --no-browser --port=${port} \
    --middleware="$_GO_ROOTDIR/tests/helpers/coverage-middleware.js" public/ &

  if [[ "$?" -ne '0' ]]; then
    @go.printf 'Failed to launch live-server on port %d.\n' "$port" >&2
    return 1
  elif [[ -n "$CI" ]]; then
    # live-server needs a little extra time on Travis.
    sleep 1
  fi
  server_pid="$!"

  phantomjs node_modules/mocha-phantomjs-core/mocha-phantomjs-core.js \
    "$test_server_url" 'spec' "{ \
      \"hooks\": \"$_GO_ROOTDIR/tests/helpers/phantomjs.js\",\
      \"useColors\": true\
    }"
  result="$?"
  kill -INT "$server_pid"
  set +m
  return "$result"
}

_test_browser_generate_coverage_report() {
  local report_path="${_GO_ROOTDIR}/coverage/lcov-report/index.html"

  # .coverage/browser.json is defined in tests/helpers/phantomjs.js
  if ! istanbul report --root '.coverage' --include 'browser.json'; then
    @go.printf 'Failed to generate coverage report.\n' >&2
    return 1
  elif [[ -z "$__TEST_ALL" ]] && command -v open >/dev/null; then
    # Pop open the report when invoked with --coverage, not via parent script.
    open "$report_path"
  fi
}

_test_browser() {
  local __coverage_run
  local result=0

  case "$1" in
  --complete)
    # Tab completions
    shift
    _test_browser_tab_completion "$@"
    return
    ;;
  --coverage)
    __coverage_run='true'
    . "$_GO_USE_MODULES" 'coverage'
    if [[ -z "$__TEST_ALL" ]]; then
      rm "$URLP_COVERAGE_DATADIR"/*.json
    fi
    ;;
  '')
    ;;
  *)
    @go.printf 'Unknown argument: %s\n' "$1" >&2
    return 1
    ;;
  esac

  _test_browser_create_bundle && _test_browser_run_tests
  result="$?"

  if [[ -n "$__coverage_run" && -z "$__TEST_ALL" ]] &&
    ! urlp.generate_coverage_report; then
    result='1'
  fi
  return "$result"
}

_test_browser "$@"
